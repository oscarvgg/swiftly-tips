{"meta":{"title":"Swiftly tips","subtitle":"Tips to improve your Swift knowledge","description":null,"author":"Oscar V. Gonzalez Greco","url":"http://swiftly.tips"},"pages":[],"posts":[{"title":"Nº 4 - Using variadic parameters","slug":"4-using-variadic-parameters","date":"2018-04-24T09:28:13.000Z","updated":"2018-04-24T09:38:37.951Z","comments":true,"path":"2018/04/24/4-using-variadic-parameters/","link":"","permalink":"http://swiftly.tips/2018/04/24/4-using-variadic-parameters/","excerpt":"","text":"Want your array parameters to look way cooler? Boring12345func trapInUpsideDown(people: [String]) &#123; // ... your code here&#125;trapInUpsideDown(people: [“Dustin”,”Mike”,”Lucas”, \"Will\"]) Cooler look12345func trapInUpsideDown(_ people: String...) &#123; // ... your code here&#125;trapInUpsideDown(“Dustin”,”Mike”,”Lucas”, \"Will\") 😉","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"},{"name":"syntax","slug":"syntax","permalink":"http://swiftly.tips/tags/syntax/"}]},{"title":"Nº 3 - Printing multiple variables at once?","slug":"3-print-multiple-things","date":"2018-04-24T09:15:33.000Z","updated":"2018-04-24T09:27:11.001Z","comments":true,"path":"2018/04/24/3-print-multiple-things/","link":"","permalink":"http://swiftly.tips/2018/04/24/3-print-multiple-things/","excerpt":"","text":"Wanna print multiple variables? Problem12345let name = \"Tony\"let lastName: \"Stark\"print(name)print(lastName) Better solutionWrap them on a tuple. 1234let name = \"Tony\"let lastName: \"Stark\"print((name, lastName)) Awh, syntactic sugar ☺️","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"}]},{"title":"Nº 2 - Ditch the semicolon","slug":"2-Ditch-the-semicolon","date":"2017-12-06T23:44:52.000Z","updated":"2017-12-07T00:10:50.090Z","comments":true,"path":"2017/12/07/2-Ditch-the-semicolon/","link":"","permalink":"http://swiftly.tips/2017/12/07/2-Ditch-the-semicolon/","excerpt":"","text":"Every time you use a semicolon (;) in swift, a tree dies 🙄. Don’t roll your eyes! It’s true. Don’t use them, they are a thing of the past. They make your code look ugly and nasty. Look how ugly: 12let lukeSkywalker = JediKnight();lukeSkywalker.savePrincessLeia(); Now look how beautiful: 12let lukeSkywalker = JediKnight()lukeSkywalker.savePrincessLeia() Nice, clean, perfect 😌.","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"}]},{"title":"Nº 1 - Closure retain cycle","slug":"1-closure-retain-cycle","date":"2017-11-30T19:07:08.000Z","updated":"2017-12-07T00:00:27.414Z","comments":true,"path":"2017/11/30/1-closure-retain-cycle/","link":"","permalink":"http://swiftly.tips/2017/11/30/1-closure-retain-cycle/","excerpt":"","text":"Avoid calling self inside your closure as much as possible. 123let tower = &#123; [weak self] rapunzel in return self?.knight.save(rapunzel)&#125; What if self is nil? I know what you’re thinking. Forget unowned! Just pass a capture list with the properties you need inside the closure. 123let tower = &#123; [knight] rapunzel in return knight.save(rapunzel)&#125; And that is how it is done.","categories":[],"tags":[{"name":"memory","slug":"memory","permalink":"http://swiftly.tips/tags/memory/"}]}]}