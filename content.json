{"meta":{"title":"Swiftly tips","subtitle":"Tips to improve your Swift knowledge","description":null,"author":"Oscar V. Gonzalez Greco","url":"http://swiftly.tips"},"pages":[],"posts":[{"title":"Swift tutorial: Value types","slug":"5-swift-tutorial-learn-data-structures","date":"2018-11-09T08:10:05.000Z","updated":"2018-11-11T18:31:35.770Z","comments":true,"path":"2018/11/09/5-swift-tutorial-learn-data-structures/","link":"","permalink":"http://swiftly.tips/2018/11/09/5-swift-tutorial-learn-data-structures/","excerpt":"","text":"I created this site to help people improve their code. And that‚Äôs still the mission today. Over the years, and especially in the recent months, I‚Äôve seen so many young programmers get confused with some of the basic foundations of Swift. That‚Äôs why I decided to create this series of swift tutorials explaining the basics of the language. So, let‚Äôs get started! What is Swift and why Apple created it?Swift is a programming language created by Apple. It‚Äôs easy to learn, but in my opinion difficult to master, however, the easy part will do for most of what you‚Äôll need. Swift is a strongly typed language and has a familiar syntax for developers that come from other famous languages. Swift was created, among other reasons, to make building apps for the Apple platform beginner friendly. Previously the scene was dominated by Objective-C. A powerful language with a syntax peculiar enough to confuse less experienced developers. Therefore, Apple came with this new pleasant-to-write language, not only attract young developers but also the very experienced ones. If you want to learn more about what is Swift, you can visit the official website. What is a type?A type is an attribute we give to our data to tell the compiler how we intend to use it. In Swift, there are two kinds of data types: the ‚Äúvalue‚Äù types and the ‚Äúreference‚Äù types. To keep the right pace, in this article we are going to talk about just value types. What is a value?A value is an instance of some data, like a number or text. In Swift, most of the commonly used value types are represented with struct, like Int, Bool, String, etc. But also another common way to represent a value type is enum. Here are some examples of values in Swift: 123true\"Hello!\"[1,2,3,4] But what do we do with just values? We need to be able to identify them so we can move them around. Introducing VariablesSo again, what do we do with a value? We store it and run operations on it. How? Well, first we need to label it. A variable is just a label that helps you identify your value for later use. 1var a = \"Hello world\" It‚Äôs important to understand, that When we run an operation that mutates our value, we don‚Äôt change the original, but instead, a new one gets created and replaces the old value. Knowing this will help you decide what kind of data type to use when coding. 123var b = [\"Hello\", \"World\"]b.append(\"!\")// b = [\"Hello\", \"World\", \"!\"] ConstantsConstants are mostly like variables but, once they‚Äôre assigned with a value, they cannot be reassigned. In Swift, they are declared with the keyword let. 1let c = 1 Trying to assign c = 2 will result in a compiler error Passing Values AroundWhen working with value types, if we assign a variable to another, the value gets copied from one to the other. While the two variables may have the same value, changing one won‚Äôt affect the other. 123var d = b // [\"Hello\", \"World\", \"!\"]d.append(\"from Italy\")// [\"Hello\", \"World\", \"!\", \"from Italy\"] Notice how b stays the same, while the value of d changed. ConclusionThis is all for now about value types in Swift. Hope you liked it and feel excited to go and play with what you‚Äôve learned. On the next part, I‚Äôm going to talk about reference types. If you like what you just read or want me to continue writing about the Swift basics, please subscribe to receive on your email a monthly summary of the activity of the blog. Also, please share this content to keep me motivated. And if you have any questions or something to add, let me know on the comments section below. Bye üòâ","categories":[],"tags":[{"name":"basics","slug":"basics","permalink":"http://swiftly.tips/tags/basics/"},{"name":"tutorial","slug":"tutorial","permalink":"http://swiftly.tips/tags/tutorial/"}]},{"title":"N¬∫ 4 - Using variadic parameters","slug":"4-using-variadic-parameters","date":"2018-04-24T09:28:13.000Z","updated":"2018-04-24T09:38:37.951Z","comments":true,"path":"2018/04/24/4-using-variadic-parameters/","link":"","permalink":"http://swiftly.tips/2018/04/24/4-using-variadic-parameters/","excerpt":"","text":"Want your array parameters to look way cooler? Boring12345func trapInUpsideDown(people: [String]) &#123; // ... your code here&#125;trapInUpsideDown(people: [‚ÄúDustin‚Äù,‚ÄùMike‚Äù,‚ÄùLucas‚Äù, \"Will\"]) Cooler look12345func trapInUpsideDown(_ people: String...) &#123; // ... your code here&#125;trapInUpsideDown(‚ÄúDustin‚Äù,‚ÄùMike‚Äù,‚ÄùLucas‚Äù, \"Will\") üòâ","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"},{"name":"syntax","slug":"syntax","permalink":"http://swiftly.tips/tags/syntax/"}]},{"title":"N¬∫ 3 - Printing multiple variables at once?","slug":"3-print-multiple-things","date":"2018-04-24T09:15:33.000Z","updated":"2018-04-24T09:27:11.001Z","comments":true,"path":"2018/04/24/3-print-multiple-things/","link":"","permalink":"http://swiftly.tips/2018/04/24/3-print-multiple-things/","excerpt":"","text":"Wanna print multiple variables? Problem12345let name = \"Tony\"let lastName: \"Stark\"print(name)print(lastName) Better solutionWrap them on a tuple. 1234let name = \"Tony\"let lastName: \"Stark\"print((name, lastName)) Awh, syntactic sugar ‚ò∫Ô∏è","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"}]},{"title":"N¬∫ 2 - Ditch the semicolon","slug":"2-Ditch-the-semicolon","date":"2017-12-06T23:44:52.000Z","updated":"2017-12-07T00:10:50.090Z","comments":true,"path":"2017/12/07/2-Ditch-the-semicolon/","link":"","permalink":"http://swiftly.tips/2017/12/07/2-Ditch-the-semicolon/","excerpt":"","text":"Every time you use a semicolon (;) in swift, a tree dies üôÑ. Don‚Äôt roll your eyes! It‚Äôs true. Don‚Äôt use them, they are a thing of the past. They make your code look ugly and nasty. Look how ugly: 12let lukeSkywalker = JediKnight();lukeSkywalker.savePrincessLeia(); Now look how beautiful: 12let lukeSkywalker = JediKnight()lukeSkywalker.savePrincessLeia() Nice, clean, perfect üòå.","categories":[],"tags":[{"name":"style","slug":"style","permalink":"http://swiftly.tips/tags/style/"}]},{"title":"N¬∫ 1 - Closure retain cycle","slug":"1-closure-retain-cycle","date":"2017-11-30T19:07:08.000Z","updated":"2017-12-07T00:00:27.414Z","comments":true,"path":"2017/11/30/1-closure-retain-cycle/","link":"","permalink":"http://swiftly.tips/2017/11/30/1-closure-retain-cycle/","excerpt":"","text":"Avoid calling self inside your closure as much as possible. 123let tower = &#123; [weak self] rapunzel in return self?.knight.save(rapunzel)&#125; What if self is nil? I know what you‚Äôre thinking. Forget unowned! Just pass a capture list with the properties you need inside the closure. 123let tower = &#123; [knight] rapunzel in return knight.save(rapunzel)&#125; And that is how it is done.","categories":[],"tags":[{"name":"memory","slug":"memory","permalink":"http://swiftly.tips/tags/memory/"}]}]}